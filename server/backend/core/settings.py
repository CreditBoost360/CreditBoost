"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import sys
#import dj_database_url
from os import getenv, path
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = BASE_DIR / '.env'

if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

DEVELOPMENT_MODE = getenv('DEVELOPMENT_MODE', 'False') == 'True'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('DJANGO_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv('DEBUG', 'False') == 'True'

# ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS',
#                        '127.0.0.1,localhost').split(',')
ALLOWED_HOSTS =[
    '.vercel.app','127.0.0.1','localhost'
]

# Application definition

INSTALLED_APPS = [
    #'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'corsheaders',
    'rest_framework',
    'djoser',
    #'storages',
    'social_django',
    'authentication',
    'ui',
    'academy',
    #'chatHistory',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.app'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if DEVELOPMENT_MODE is True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
        
        # 'default': {
        # 'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': getenv('DB_NAME'),
        # 'USER': getenv('DB_USER'),
        # 'PASSWORD': getenv('DB_PASSWORD'),
        # 'HOST': getenv('DB_HOST'),
        # 'PORT': getenv('DB_PORT'),
        # }
    }
    
else:
    
    DATABASES = {
        'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': getenv('DB_NAME'),
        'USER': getenv('DB_USER'),
        'PASSWORD': getenv('DB_PASSWORD'),
        'HOST': getenv('DB_HOST'),
        'PORT': getenv('DB_PORT'),
    }
    }
    
# DATABASES = {
#         'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': getenv('DB_NAME'),
#         'USER': getenv('DB_USER'),
#         'PASSWORD': getenv('DB_PASSWORD'),
#         'HOST': getenv('DB_HOST'),
#         'PORT': getenv('DB_PORT'),
#     }
# }

# Email settings

# email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = getenv('EMAIL_HOST')
EMAIL_PORT = getenv('EMAIL_PORT')
EMAIL_HOST_USER = getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = getenv('EMAIL_HOST_USER')

FRONTEND_URL = 'http://localhost:5173/'


# EMAIL_BACKEND = 'django_ses.SESBackend'
# DEFAULT_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')

# # AWS_SES_ACCESS_KEY_ID = getenv('AWS_SES_ACCESS_KEY_ID')
# # AWS_SES_SECRET_ACCESS_KEY = getenv('AWS_SES_SECRET_ACCESS_KEY')
# # AWS_SES_REGION_NAME = getenv('AWS_SES_REGION_NAME')
# # AWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'
# AWS_SES_FROM_EMAIL = getenv('AWS_SES_FROM_EMAIL')
# USE_SES_V2 = True

# DOMAIN = getenv('DOMAIN')
if DEVELOPMENT_MODE:
    DOMAIN ='localhost:5173'
else:
    DOMAIN = getenv('DOMAIN')
    
SITE_NAME = 'TurboBrok'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

if DEVELOPMENT_MODE is True:
    STATIC_URL = '/static/'
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    MEDIA_URL = 'media/'
    MEDIA_ROOT = BASE_DIR / 'media'
else:
    # AWS_S3_ACCESS_KEY_ID = getenv('AWS_S3_ACCESS_KEY_ID')
    # AWS_S3_SECRET_ACCESS_KEY = getenv('AWS_S3_SECRET_ACCESS_KEY')
    # AWS_STORAGE_BUCKET_NAME = getenv('AWS_STORAGE_BUCKET_NAME')
    # AWS_S3_REGION_NAME = getenv('AWS_S3_REGION_NAME')
    # AWS_S3_ENDPOINT_URL = f'https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com'
    # AWS_S3_OBJECT_PARAMETERS = {
    #     'CacheControl': 'max-age=86400'
    # }
    # AWS_DEFAULT_ACL = 'public-read'
    # AWS_LOCATION = 'static'
    # AWS_MEDIA_LOCATION = 'media'
    # AWS_S3_CUSTOM_DOMAIN = getenv('AWS_S3_CUSTOM_DOMAIN')
    # STORAGES = {
    #     'default': {'BACKEND': 'custom_storages.CustomS3Boto3Storage'},
    #     'staticfiles': {'BACKEND': 'storages.backends.s3boto3.S3StaticStorage'}
    # }
    STATIC_URL = '/static/'
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_DIRS = [
    BASE_DIR/'static',
]   
    
#security
if DEVELOPMENT_MODE is True:
    pass
else:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authentication.authentication.CustomJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': False,
    'ACTIVATION_URL': 'activation/{uid}/{token}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'TOKEN_MODEL': None,
    #'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': getenv('REDIRECT_URLS').split(',')
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS':[
        "http://127.0.0.1:5173/auth/google"
        ,"http://localhost:5173/auth/facebook"
    ]
}

AUTH_COOKIE = 'access'
AUTH_COOKIE_MAX_AGE = 60 * 60 * 24
AUTH_COOKIE_SECURE = getenv('AUTH_COOKIE_SECURE', 'True') == 'True'
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_PATH = '/'
AUTH_COOKIE_SAMESITE = 'None'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv('GOOGLE_AUTH_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv('GOOGLE_AUTH_SECRET_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid'
]
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']


# SOCIAL_AUTH_FACEBOOK_KEY = getenv('FACEBOOK_AUTH_KEY')
# SOCIAL_AUTH_FACEBOOK_SECRET = getenv('FACEBOOK_AUTH_SECRET_KEY')
# SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
# SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
#     'fields': 'email, first_name, last_name'
# }


# CORS_ALLOWED_ORIGINS = getenv(
#     'CORS_ALLOWED_ORIGINS',
#     'http://localhost:5173,http://127.0.0.1:5173'
# ).split(',')

if DEVELOPMENT_MODE ==True:
    
    CORS_ALLOWED_ORIGINS =[
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'https://turbo-brok.vercel.app'
    ]
    
else:
    CORS_ALLOWED_ORIGINS = [
    'https://turbobrok.com',
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'https://turbo-brok.vercel.app'
    ]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = ["Authorization", "Content-Type", "Accept"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.UserAccount'

#Jazzmine setting: For admin customization
# JAZZMIN_SETTINGS = {
#     "site_title": "Turbo Brok",
#     "site_header": "Admin Dashboard",
#     "welcome_sign": "Welcome Turbo Brok ",
#     "site_brand": "Turbo Brok",
#     "show_sidebar": True,
#     "navigation_expanded": True,
#     #"site_logo": "img/logo.jpeg",
#     # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
#     #"login_logo": "img/logo.jpeg",
#     # Logo to use for login form in dark themes (defaults to login_logo)
#     #"login_logo_dark": "img/logo.jpeg",
    
#     "custom_css": None,
#     "custom_js": None,
#     "show_ui_builder": False,
#     # Hide these apps when generating side menu e.g (auth)
#     "hide_apps": [],
#     # Hide these models when generating side menu (e.g auth.user)
#     "hide_models": [],
# }



